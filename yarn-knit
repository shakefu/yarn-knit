#!/bin/bash

BASE_IMAGE="build_node"

main () {
    local build_path
    local build_script
    build_path=${1:-.}

    pushd $(dirname $0) > /dev/null
    build_script=$(pwd -P)/$0
    popd > /dev/null

    echo "$build_script"

    shift

    if [ -n "$1" ]; then echo "Too many arguments."; exit 1; fi

    cd $build_path
    echo "$(pwd)"

    # TODO: Make sure $HOME/.npmrc exists

    # TODO: Compose a more sane build name
    local build_name
    build_name="build_$(basename $(pwd))"  # TODO: Fix this

    # TODO: Make this flexible depending on presence of yarn command
    # TODO: Make sure target cache dir exists
    local cache_dir
    cache_dir="/tmp/yarn/"

    echo "$cache_dir"

    # TODO: Figure out a way to check if yarn.lock && package.json has changed,
    # so things can be cached

    # TODO: Look into using labels to enable caching

    # Step one, do a --production install
    docker run \
        --name $build_name \
        -v "$(pwd):/usr/local/src/app/" \
        -v "$build_script:/usr/local/bin/build.sh" \
        -v "$cache_dir:/root/.cache/yarn" \
        -v "$HOME/.npmrc:/root/.npmrc" \
        $BASE_IMAGE build.sh --production

    # Commit the production container
    docker commit $build_name $build_name

    # Remove the container used to commit
    docker rm $build_name

    # Step two, do a development install
    docker run \
        --name $build_name \
        -v "$build_script:/usr/local/bin/build.sh" \
        -v "$cache_dir:/root/.cache/yarn" \
        -v "$HOME/.npmrc:/root/.npmrc" \
        $build_name build.sh --development

    # Commit the development container
    docker commit $build_name $build_name:dev

    # TODO: Better clean up
    docker rm $build_name
}


build_prod () {
    # Switch to our local source dir
    cd /usr/local/src/app

    # TODO: Make exclusion configurable
    local exclude
    exclude='\/(node_modules|\.git)\/|^\.$'

    # Copy everything except node_modules /usr/src/app from /usr/local/src/app
    find . -type f | grep -vE "$exclude" | \
        xargs -I{} cp --parents -v {} /usr/src/app/

    # Switch to our container source dir
    cd /usr/src/app/

    ls -lah  # TODO: Remove me

    yarn install --production

    # TODO: Moar stuff?
}


build_dev () {
    # Only will work if working from a prod build image
    if [[ ! -e "yarn.lock" || ! -e "package.json" ]]; then
        # TODO: Error message
        echo "Not from prod image"
        exit 1
    fi

    ls -lah  # TODO: Remove me

    yarn install

    # TODO: Moar stuff?
}

cmd () {
    case $1 in
        --production)
            shift
            build_prod
            ;;
        --development)
            shift
            build_dev
            ;;
        *)
            main "$@"
            ;;
    esac
}

time cmd "$@"
