#!/bin/bash

##################
# Environment vars
##################

# Toggle debug output
if [[ -z ${KNIT_DEBUG+x} ]]; then
    KNIT_DEBUG=
fi

# Docker Hub repo name
KNIT_REPO=${KNIT_REPO:-shakefu}

# Exclusion regex for copying source files
KNIT_EXCLUDE=${KNIT_EXCLUDE:-'\/(node_modules|\.git)\/|^\.$'}

# Prefix for output messages
KNIT_PREFIX=${KNIT_PREFIX:-}

# Yarn flags
KNIT_YARN_FLAGS=${KNIT_YARN_FLAGS:-'--pure-lockfile --prefer-offline --no-progress'}

# Optional production-only build
KNIT_PRODUCTION=${KNIT_PRODUCTION:-}


#############
# Global vars
#############

# Script information
KNIT_SCRIPT=$(which knit)
KNIT_DIR=$(dirname "$KNIT_SCRIPT")
KNIT_CACHE_DIR=''
KNIT_BUILD_DIR=''
KNIT_BUILD_NAME=''

# File names
KNIT_BASE=".knit"
KNIT_DOCKERFILE="$KNIT_BASE/Dockerfile"
KNIT_CACHED="$KNIT_DOCKERFILE-cached"
KNIT_PROD="$KNIT_DOCKERFILE-prod"
KNIT_DEV="$KNIT_DOCKERFILE-dev"
KNIT_NPMRC="$HOME/.npmrc"


##############
# Sub-commands
##############

_build () {
    # Set our build globals
    KNIT_CACHE_DIR=$(yarn_cache_dir)
    KNIT_BUILD_NAME=$(basename "$KNIT_BUILD_DIR")
    KNIT_BUILD_NAME=${1:-$KNIT_BUILD_NAME}

    info "Building $KNIT_BUILD_NAME"

    _setup

    info "Checking for cached images"
    local cache_image
    local cache_sha
    cache_image=$(image_base)
    cache_sha=$(docker build -q -t "$cache_image" -f "$KNIT_CACHED" .)

    local cached_prod
    if [[ -n "$KNIT_PRODUCTION" ]]; then
        cached_prod=$(docker images -q --filter=label="knit_base=$cache_sha" \
            --filter=label="knit_build=production" \
            --filter=label="knit_stage=installed")
    fi

    local cached_dev
    cached_dev=$(docker images -q --filter=label="knit_base=$cache_sha" \
        --filter=label="knit_build=development" \
        --filter=label="knit_stage=installed")

    if [[ -n "$cached_prod" ]]; then
        if (( $(grep -c . <<< "$cached_prod") > 1 )); then
            error "Multiple cached images found, please run 'docker image " \
                "prune', or manually delete images."
        fi
        debug "Found cached production image: $cached_prod"
    fi

    if [[ -n "$cached_dev" ]]; then
        if (( $(grep -c . <<< "$cached_dev") > 1 )); then
            error "Multiple cached images found, please run 'docker image " \
                "prune', or manually delete images."
        fi
        debug "Found cached development image: $cached_dev"
    fi

    # If we have a cached image, then use that and just update the files
    if [[ -n "$cached_prod" ]]; then
        info "Updating production image from cache"
        _update_files "$cached_prod"
        _post_install production
    fi

    if [[ -n "$cached_dev" ]]; then
        info "Updating development image from cache"
        _update_files "$cached_dev"

        _post_install development
    fi

    if [[ -n "$cached_prod" && -n "$cached_dev" ]]; then
        # Updated both images, and done
        _cleanup
        exit 0
    elif [[ -z "$KNIT_PRODUCTION" && -n "$cached_dev" ]]; then
        # Only needed to update dev, hooray
        _cleanup
        exit 0
    fi

    debug "Using yarn cache from $KNIT_CACHE_DIR"

    local name
    name=$(container_build)
    info "Starting build container $name"
    docker run \
        --detach \
        --name "$name" \
        --volume "$(pwd):/usr/local/src/app" \
        --volume "$KNIT_SCRIPT:/usr/local/bin/knit" \
        --volume "$KNIT_CACHE_DIR:/root/.cache/yarn" \
        --volume "$KNIT_NPMRC:/root/.npmrc" \
        --env "KNIT_DEBUG=$KNIT_DEBUG" \
        --env "KNIT_EXCLUDE=$KNIT_EXCLUDE" \
        --env "KNIT_PREFIX=CONTAINER" \
        --entrypoint "/bin/bash" \
        "$cache_image" knit wait

    if [[ -n "$KNIT_DEBUG" ]]; then docker ps --filter="name=$name"; fi

    # We have to override the CMD and ENTRYPOINT when we commit, because the
    # commit otherwise will pick up the entrypoint and command from the running
    # container (e.g. "/bin/bash" and "knit wait")

    if [[ -n "$KNIT_PRODUCTION" && -z "$cached_prod" ]]; then
        info "Installing production dependencies"
        docker exec -t "$name" knit install --production

        info "Committing install stage image"
        local image
        image=$(image_prod_install)
        docker commit \
            --change 'CMD ["bash"]' \
            --change "LABEL \
                knit_base='$cache_sha' \
                knit_build='production' \
                knit_stage='installed'" \
            "$name" "$image"

        _update_files "$image"
        _post_install production
    fi

    if [[ -z "$cached_dev" ]]; then
        info "Installing development dependencies"
        docker exec -t "$name" knit install --development

        info "Committing install stage image"
        image=$(image_dev_install)
        docker commit \
            --change 'CMD ["bash"]' \
            --change "LABEL \
                knit_base='$cache_sha' \
                knit_build='development' \
                knit_stage='installed'" \
            "$name" "$image"

        _update_files "$image"
        _post_install development
    fi

    debug "Removing build container"
    _rm "$name"

    _cleanup

    # For Josh
    green "Done knitting."
    echo
    exit 0
}


_install () {
    local flags
    flags="$*"

    local yarn_cmd
    yarn_cmd="yarn install $KNIT_YARN_FLAGS $flags"

    info "Running $yarn_cmd"
    $yarn_cmd
}


_copy () {
    # Switch to our local source dir
    cd /usr/local/src/app || error "Could not find source directory?!"

    local copy_debug
    if [[ -n "$KNIT_DEBUG" ]]; then copy_debug="-v"; fi

    # Copy everything except node_modules /usr/src/app from /usr/local/src/app
    info "Copying source files"
    find . \( -path ./node_modules -o -path ./.git \) -prune -o -type f \
        -exec cp --parents $copy_debug {} /usr/src/app/ \;

    # Switch to our container source dir
    cd /usr/src/app/ || error "Could not find app directory?!"

    if [[ -n "$KNIT_DEBUG" ]]; then ls -lah; fi
}


_clean () {
    KNIT_BUILD_NAME=$(basename "$KNIT_BUILD_DIR")
    KNIT_BUILD_NAME=${1:-$KNIT_BUILD_NAME}

    _cleanup

    info "Cleaning all images for $KNIT_BUILD_NAME"

    docker rmi "$(image_prod_install)" 2>/dev/null || true
    docker rmi "$(image_dev_install)" 2>/dev/null || true
    docker rmi "$(image_prod)" 2>/dev/null || true
    docker rmi "$(image_dev)" 2>/dev/null || true
    docker rmi "$(image_base)" 2>/dev/null || true
    docker image prune -f 2>/dev/null || true

    green "Done knitting."
    echo
}


###################
# Indirect commands
###################

_setup () {
    # TODO: Test for being in the build dir?
    debug "Making $KNIT_BASE directory"
    mkdir -p "$KNIT_BASE"

    # TODO: Move this dockerfile somewhere better
    debug "Creating yarn-knit:cache Dockerfiles"
    echo "FROM $KNIT_REPO/yarn-knit:cache" > "$KNIT_CACHED"

    debug "Checking for .npmrc at $KNIT_NPMRC"
    if [[ ! -f "$KNIT_NPMRC" ]]; then
        error "Cannot find .npmrc at $KNIT_NPMRC"
    fi

    debug "Checking for package.json"
    if [[ ! -f "./package.json" ]]; then
        error "Cannot find package.json"
    fi

    debug "Checking for yarn.lock"
    if [[ ! -f "./yarn.lock" ]]; then
        error "Cannot find yarn.lock"
    fi

    debug "Checking yarn version"
    # TODO: Make this smarter than a plain ascii check
    if [[ "$(yarn --version)" < "0.19." ]]; then
        error "Must have yarn --version greater than 0.19, please upgrade"
    fi

    debug "Checking docker version"
    if [[ "$(docker --version | awk '{print $3}')" < "1.13." ]]; then
        warn "Docker outdated, please upgrade to version 1.13 or later"
    fi
}

_update_files () {
    local cache_image=${1:-}
    info "Updating files for $cache_image"

    local build
    build=$(docker inspect -f "{{.Config.Labels.knit_build}}" "$cache_image")

    if [[ -z "$build" ]]; then
        error "Could not get build type from image"
    fi

    local name
    local image

    name="$(container_build)_$build"

    if [[ "$build" == "production" ]]; then
        image=$(image_prod)
    elif [[ "$build" == "development" ]]; then
        image=$(image_dev)
    else
        error "Unknown build type: $build"
    fi

    debug "Build environment: $build"
    debug "Container name: $name"
    debug "Target image: $image"

    info "Starting update container"
    docker run \
        --detach \
        --name "$name" \
        --volume "$(pwd):/usr/local/src/app" \
        --volume "$KNIT_SCRIPT:/usr/local/bin/knit" \
        --env "KNIT_DEBUG=$KNIT_DEBUG" \
        --env "KNIT_EXCLUDE=$KNIT_EXCLUDE" \
        --env "KNIT_PREFIX=CONTAINER" \
        --entrypoint "/bin/bash" \
        "$cache_image" knit wait

    info "Copying package files"
    docker exec -t "$name" knit copy

    info "Commiting assembly stage image"
    docker commit \
        --change 'CMD ["start"]' \
        --change "LABEL knit_stage='assembled'" \
        --change 'ENTRYPOINT ["yarn", "run"]' \
        "$name" "$image"

    _rm "$name"
}

_post_install () {
    local build
    build=${1:-}

    debug "Post install"
    if grep "FROM $KNIT_REPO/yarn-knit:onbuild" Dockerfile &>/dev/null; then
        debug "Found $KNIT_REPO/yarn-knit:onbuild Dockerfile"
    else
        debug "No matching Dockerfile found"
        return
    fi

    info "Building post install images for $build"

    if [[ "$build" == "production" ]]; then
        # Create Production Dockerfile
        echo "FROM $(image_prod)" > $KNIT_PROD
        grep -v "^FROM" Dockerfile >> $KNIT_PROD
        docker build -t "$(image_prod)" -f $KNIT_PROD . || true
    elif [[ "$build" == "development" ]]; then
        # Create Development Dockerfile
        echo "FROM $(image_dev)" > $KNIT_DEV
        grep -v "^FROM" Dockerfile >> $KNIT_DEV
        docker build -t "$(image_dev)" -f $KNIT_DEV . || true
    else
        error "Invalid build: $build"
    fi
}

_cleanup () {
    debug "Cleaning up $KNIT_BASE"
    rm "$KNIT_CACHED" \
        "$KNIT_PROD" \
        "$KNIT_DEV" \
        2>/dev/null || true
    rmdir "$KNIT_BASE" 2>/dev/null

    debug "Cleaing up build container"
    _rm "$(container_build)"
}

_rm () {
    local container
    container=${1:-}
    docker kill "$container" &>/dev/null || true
    docker rm "$container" &>/dev/null || true
}


#################
# Main entrypoint
#################


main () {
    info "Knitting ..."

    # Set our global script references
    KNIT_DIR=$(resolve_symlink "$0")
    KNIT_SCRIPT="$KNIT_DIR/$(basename "$0")"
    KNIT_BUILD_DIR=$(pwd)
    debug "KNIT_DIR=$KNIT_DIR"
    debug "KNIT_SCRIPT=$KNIT_SCRIPT"
    debug "KNIT_BUILD_DIR=$KNIT_BUILD_DIR"

    case "$1" in
        wait)
            shift
            info "Knit is waiting ..."
            sleep 10000
            ;;
        build)
            shift
            _build "$@"
            ;;
        install)
            shift
            _install "$@"
            ;;
        copy)
            shift
            _copy "$@"
            ;;
        clean)
            shift
            _clean "$@"
            ;;
        *)
            _build "$@"
            ;;
    esac

    exit 0
}


###################
# Library functions
###################

yarn_cache_dir () {
    local dir
    dir=$(yarn cache dir 2>/dev/null || echo '/tmp/yarn')

    if [[ ! -d "$dir" ]]; then
        mkdir -p "$dir" || error "Could not create yarn cache directory"
    fi

    echo "$dir"
}

container_build () {
    echo "knit_$KNIT_BUILD_NAME"
}

image_base () {
    echo "$KNIT_BUILD_NAME:knit.base"
}

image_prod_install () {
    echo "$KNIT_BUILD_NAME:knit.install.production"
}

image_dev_install () {
    echo "$KNIT_BUILD_NAME:knit.install.development"
}

image_prod () {
    echo "$KNIT_BUILD_NAME:knit.production"
}

image_dev () {
    echo "$KNIT_BUILD_NAME:knit.development"
}

resolve_symlink () {
    local script
    local newscript

    script=${1:-}
    newscript=''

    until [ "$script" = "$newscript" ]; do
        if [ "${script:0:1}" = '.' ]; then script="$PWD/$script"; fi
        cd "$(dirname "$script")" || error "Could not resolve symlinks."
        if [ ! "${script:0:1}" = '.' ]; then script=$(basename "$script"); fi
        script="${newscript:=$script}"
        # shellcheck disable=SC2012
        newscript=$(ls -l $script | awk '{ print $NF }')
    done
    if [ ! "${script:0:1}" = '/' ]; then script=$PWD/$script; fi

    # shellcheck disable=SC2005
    echo "$(dirname "$script")"
}

##################
# Output functions
##################

prefix () {
    if [[ -z "$KNIT_PREFIX" ]]; then return; fi
    grey "[$KNIT_PREFIX] "
}

info () {
    prefix
    blue "[INFO] "
    echo "$*"
}


warn () {
    prefix
    yellow "[WARN] "
    echo "$*"
}


error () {
    prefix
    red "[ERROR] "
    echo "$*"
    _cleanup
    exit 1
}


debug () {
    if [[ -z "$KNIT_DEBUG" ]]; then return; fi
    prefix
    cyan "[DEBUG] "
    echo "$*"
}

# Colors
red () { printf "\033[1;31m%s\033[0m" "$*"; }
yellow () { printf "\033[1;33m%s\033[0m" "$*"; }
pink () { printf "\033[1;35m%s\033[0m" "$*"; }
blue () { printf "\033[1;34m%s\033[0m" "$*"; }
green () { printf "\033[1;32m%s\033[0m" "$*"; }
drk_green () { printf "\033[0;32m%s\033[0m" "$*"; }
cyan () { printf "\033[0;36m%s\033[0m" "$*"; }
grey () { printf "\033[2;30m%s\033[0m" "$*"; }


################
# Run the script
################

main "$@"

